/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Scout from "../../../index";
export declare namespace Documents {
    interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Documents {
    protected readonly _options: Documents.Options;
    constructor(_options?: Documents.Options);
    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.list("collection_id", "table_id")
     */
    list(collection_id: string, table_id: string, requestOptions?: Documents.RequestOptions): Promise<Scout.CollectionServiceHandlersGetDocumentsResponse>;
    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {Scout.DocumentsCreateRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.create("collection_id", "table_id", {
     *         "key": true
     *     })
     */
    create(collection_id: string, table_id: string, request: Scout.DocumentsCreateRequest, requestOptions?: Documents.RequestOptions): Promise<Scout.CollectionServiceHandlersCreateDocumentResponse>;
    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {string} document_id
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.get("collection_id", "table_id", "document_id")
     */
    get(collection_id: string, table_id: string, document_id: string, requestOptions?: Documents.RequestOptions): Promise<Scout.CollectionServiceHandlersGetDocumentResponse>;
    /**
     * @param {string} collection_id
     * @param {string} document_id
     * @param {string} table_id
     * @param {Record<string, Scout.DocumentsUpdateRequestValue>} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.update("collection_id", "document_id", "table_id", {
     *         "key": true
     *     })
     */
    update(collection_id: string, document_id: string, table_id: string, request: Record<string, Scout.DocumentsUpdateRequestValue>, requestOptions?: Documents.RequestOptions): Promise<Scout.CollectionServiceHandlersUpdateDocumentResponse>;
    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {string} document_id
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.delete("collection_id", "table_id", "document_id")
     */
    delete(collection_id: string, table_id: string, document_id: string, requestOptions?: Documents.RequestOptions): Promise<Scout.CollectionServiceHandlersDeleteDocumentsResponse>;
    /**
     * Delete documents given a list of document ids.
     *
     * @param {string} collection_id
     * @param {string} table_id
     * @param {string[]} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.deleteBatch("collection_id", "table_id", ["string"])
     */
    deleteBatch(collection_id: string, table_id: string, request: string[], requestOptions?: Documents.RequestOptions): Promise<Scout.CollectionServiceHandlersDeleteDocumentsResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
