/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Scout from "../../../index";
export declare namespace Copilots {
    interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Copilots {
    protected readonly _options: Copilots.Options;
    constructor(_options?: Copilots.Options);
    /**
     * List all copilots in the organization
     *
     * @param {Scout.CopilotsListRequest} request
     * @param {Copilots.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.copilots.list()
     */
    list(request?: Scout.CopilotsListRequest, requestOptions?: Copilots.RequestOptions): Promise<Scout.SrcHandlersListCopilotsResponse>;
    /**
     * @param {Scout.CopilotConfig} request
     * @param {Copilots.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.copilots.create({})
     */
    create(request: Scout.CopilotConfig, requestOptions?: Copilots.RequestOptions): Promise<Scout.SrcHandlersCreateCopilotResponse>;
    /**
     * Fetch app configuration by ID.
     *
     * @param {string} copilot_id
     * @param {Copilots.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.copilots.get("copilot_id")
     */
    get(copilot_id: string, requestOptions?: Copilots.RequestOptions): Promise<Scout.SrcHandlersGetCopilotResponse>;
    /**
     * @param {string} copilot_id
     * @param {Scout.CopilotConfig} request
     * @param {Copilots.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.copilots.update("copilot_id", {})
     */
    update(copilot_id: string, request: Scout.CopilotConfig, requestOptions?: Copilots.RequestOptions): Promise<Scout.SrcHandlersUpdateCopilotResponse>;
    /**
     * @param {string} copilot_id
     * @param {Copilots.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.copilots.delete("copilot_id")
     */
    delete(copilot_id: string, requestOptions?: Copilots.RequestOptions): Promise<Scout.SrcHandlersDeleteCopilotResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
