/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Scout from "../../../index";
export declare namespace Environments {
    interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Environments {
    protected readonly _options: Environments.Options;
    constructor(_options?: Environments.Options);
    /**
     * List all environments for a workflow in the organization
     *
     * @param {string} workflow_id
     * @param {Environments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.environments.list("workflow_id")
     */
    list(workflow_id: string, requestOptions?: Environments.RequestOptions): Promise<Scout.SrcHandlersGetWorkflowEnvironmentsResponse>;
    /**
     * Update deployments within a workflow environment
     *
     * @param {string} workflow_id
     * @param {string} environment_id
     * @param {Scout.UpdateRequestBody} request
     * @param {Environments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.environments.update("workflow_id", "environment_id", {
     *         name: "name",
     *         description: "description",
     *         deployments: [{
     *                 revision_lookup: Scout.EnvironmentDeploymentConfigRevisionLookup.Latest
     *             }]
     *     })
     */
    update(workflow_id: string, environment_id: string, request: Scout.UpdateRequestBody, requestOptions?: Environments.RequestOptions): Promise<Scout.SrcHandlersUpdateWorkflowEnvironmentResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
