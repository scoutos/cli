/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Scout from "../../../index";
export declare namespace WorkflowLogs {
    interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class WorkflowLogs {
    protected readonly _options: WorkflowLogs.Options;
    constructor(_options?: WorkflowLogs.Options);
    listLogs(request: Scout.WorkflowLogsListLogsRequest, requestOptions?: WorkflowLogs.RequestOptions): Promise<core.Stream<Scout.WorkflowLogsListLogsResponse>>;
    protected _getAuthorizationHeader(): Promise<string>;
}
