/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Scout from "../../../index";
export declare namespace Workflows {
    interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Workflows {
    protected readonly _options: Workflows.Options;
    constructor(_options?: Workflows.Options);
    /**
     * @param {Scout.WorkflowsCreateRevisionRequest} request
     * @param {Workflows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.workflows.createRevision({
     *         body: {}
     *     })
     */
    createRevision(request: Scout.WorkflowsCreateRevisionRequest, requestOptions?: Workflows.RequestOptions): Promise<Scout.SrcHandlersCreateWorkflowRevisionResponse>;
    /**
     * List all workflows in the organization
     *
     * @param {Scout.WorkflowsListRequest} request
     * @param {Workflows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.workflows.list()
     */
    list(request?: Scout.WorkflowsListRequest, requestOptions?: Workflows.RequestOptions): Promise<Scout.SrcHandlersListWorkflowsResponse>;
    /**
     * @param {Scout.WorkflowsCreateRequest} request
     * @param {Workflows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.workflows.create({
     *         body: {}
     *     })
     */
    create(request: Scout.WorkflowsCreateRequest, requestOptions?: Workflows.RequestOptions): Promise<Scout.SrcHandlersCreateWorkflowResponse>;
    /**
     * Fetch app configuration by ID.
     *
     * @param {string} workflow_id
     * @param {Workflows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.workflows.get("workflow_id")
     */
    get(workflow_id: string, requestOptions?: Workflows.RequestOptions): Promise<Scout.SrcHandlersGetWorkflowResponse>;
    /**
     * @param {string} workflow_id
     * @param {Scout.WorkflowConfigInput} request
     * @param {Workflows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.workflows.update("workflow_id", {})
     */
    update(workflow_id: string, request: Scout.WorkflowConfigInput, requestOptions?: Workflows.RequestOptions): Promise<Scout.SrcHandlersUpdateWorkflowResponse>;
    /**
     * @param {string} workflow_id
     * @param {Workflows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.workflows.delete("workflow_id")
     */
    delete(workflow_id: string, requestOptions?: Workflows.RequestOptions): Promise<Scout.SrcHandlersDeleteWorkflowResponse>;
    runStream(workflow_id: string, request: Scout.WorkflowsRunStreamRequest, requestOptions?: Workflows.RequestOptions): Promise<core.Stream<Scout.WorkflowRunStreamResponse>>;
    /**
     * @param {string} workflow_id
     * @param {Scout.WorkflowsRunRequest} request
     * @param {Workflows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.workflows.run("workflow_id", {})
     */
    run(workflow_id: string, request: Scout.WorkflowsRunRequest, requestOptions?: Workflows.RequestOptions): Promise<Scout.WorkflowRunResponse>;
    /**
     * @param {Scout.SrcHandlersWorkflowsExecuteWithConfigReqBody} request
     * @param {Workflows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.workflows.runWithConfig({
     *         workflow_config: {}
     *     })
     */
    runWithConfig(request: Scout.SrcHandlersWorkflowsExecuteWithConfigReqBody, requestOptions?: Workflows.RequestOptions): Promise<Scout.WorkflowsRunWithConfigResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
