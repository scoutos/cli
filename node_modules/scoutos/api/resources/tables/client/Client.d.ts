/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Scout from "../../../index";
export declare namespace Tables {
    interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Tables {
    protected readonly _options: Tables.Options;
    constructor(_options?: Tables.Options);
    /**
     * @param {string} collection_id
     * @param {Tables.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.tables.list("collection_id")
     */
    list(collection_id: string, requestOptions?: Tables.RequestOptions): Promise<Scout.CollectionServiceHandlersGetTablesResponse>;
    /**
     * @param {string} collection_id
     * @param {Scout.TableConfigInput} request
     * @param {Tables.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.tables.create("collection_id")
     */
    create(collection_id: string, request?: Scout.TableConfigInput, requestOptions?: Tables.RequestOptions): Promise<Scout.CollectionServiceHandlersCreateTableResponse>;
    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {Tables.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.tables.get("collection_id", "table_id")
     */
    get(collection_id: string, table_id: string, requestOptions?: Tables.RequestOptions): Promise<Scout.CollectionServiceHandlersGetTableResponse>;
    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {Scout.TableData} request
     * @param {Tables.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.tables.update("collection_id", "table_id")
     */
    update(collection_id: string, table_id: string, request?: Scout.TableData, requestOptions?: Tables.RequestOptions): Promise<Scout.CollectionServiceHandlersUpdateTableResponse>;
    /**
     * Delete a table given a table_id.
     *
     * @param {string} collection_id
     * @param {string} table_id
     * @param {Tables.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.tables.delete("collection_id", "table_id")
     */
    delete(collection_id: string, table_id: string, requestOptions?: Tables.RequestOptions): Promise<Scout.CollectionServiceHandlersDeleteTableResponse>;
    /**
     * Sync a table with a list of documents.
     *
     * @param {string} collection_id
     * @param {string} table_id
     * @param {Record<string, unknown>[]} request
     * @param {Tables.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.tables.sync("collection_id", "table_id", [{
     *             "key": "value"
     *         }])
     */
    sync(collection_id: string, table_id: string, request: Record<string, unknown>[], requestOptions?: Tables.RequestOptions): Promise<Scout.CollectionServiceHandlersTableSyncResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
