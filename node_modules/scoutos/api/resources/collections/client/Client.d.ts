/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Scout from "../../../index";
export declare namespace Collections {
    interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Collections {
    protected readonly _options: Collections.Options;
    constructor(_options?: Collections.Options);
    /**
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.collections.list()
     */
    list(requestOptions?: Collections.RequestOptions): Promise<Scout.CollectionServiceHandlersGetCollectionsResponse>;
    /**
     * @param {Scout.CollectionConfig} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.create({})
     */
    create(request: Scout.CollectionConfig, requestOptions?: Collections.RequestOptions): Promise<Scout.CollectionServiceHandlersCreateCollectionResponse>;
    /**
     * @param {string} collection_id
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.get("collection_id")
     */
    get(collection_id: string, requestOptions?: Collections.RequestOptions): Promise<Scout.CollectionServiceHandlersGetCollectionResponse>;
    /**
     * @param {string} collection_id
     * @param {Scout.CollectionConfig} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.update("collection_id", {})
     */
    update(collection_id: string, request: Scout.CollectionConfig, requestOptions?: Collections.RequestOptions): Promise<Scout.CollectionServiceHandlersUpdateCollectionResponse>;
    /**
     * Delete a collection given a collection_id.
     *
     * @param {string} collection_id
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.delete("collection_id")
     */
    delete(collection_id: string, requestOptions?: Collections.RequestOptions): Promise<Scout.CollectionServiceHandlersDeleteCollectionResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
