/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Scout from "../../../index";
export declare namespace Revisions {
    interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Revisions {
    protected readonly _options: Revisions.Options;
    constructor(_options?: Revisions.Options);
    /**
     * List all app revisions in the organization
     *
     * @param {string} workflow_id
     * @param {Revisions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.revisions.list("workflow_id")
     */
    list(workflow_id: string, requestOptions?: Revisions.RequestOptions): Promise<Scout.SrcHandlersListWorkflowRevisionsResponse>;
    /**
     * @param {string} workflow_id
     * @param {string} revision_id
     * @param {Revisions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.revisions.update("workflow_id", "revision_id")
     */
    update(workflow_id: string, revision_id: string, requestOptions?: Revisions.RequestOptions): Promise<Scout.SrcHandlersPromoteWorkflowRevisionResponse>;
    /**
     * @param {string} workflow_id
     * @param {string} revision_id
     * @param {Revisions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.revisions.delete("workflow_id", "revision_id")
     */
    delete(workflow_id: string, revision_id: string, requestOptions?: Revisions.RequestOptions): Promise<Scout.SrcHandlersDeleteWorkflowRevisionResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
